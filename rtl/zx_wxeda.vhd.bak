library IEEE; 
use IEEE.std_logic_1164.all; 
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.ALL;    

entity test is                   
	port(

		-- Clock (48MHz)
		CLK				: in std_logic;

		-- SDRAM (32MB 16x16bit)
		SDRAM_DQ		: inout std_logic_vector(15 downto 0);
		SDRAM_A			: out std_logic_vector(12 downto 0);
		SDRAM_BA		: out std_logic_vector(1 downto 0);
		SDRAM_CLK		: out std_logic;
		SDRAM_DQML		: out std_logic;
		SDRAM_DQMH		: out std_logic;
		SDRAM_WE_N		: out std_logic;
		SDRAM_CAS_N		: out std_logic;
		SDRAM_RAS_N		: out std_logic;
		SDRAM_CKE      	: out std_logic;
		SDRAM_CS_N     	: out std_logic;

		-- SPI FLASH (W25Q32)
		DATA0			: in std_logic;
		NCSO			: out std_logic;
		DCLK			: out std_logic;
		ASDO			: out std_logic;

		-- VGA 5:6:5
		VGA_R			: out std_logic_vector(4 downto 0);
		VGA_G			: out std_logic_vector(5 downto 0);
		VGA_B			: out std_logic_vector(4 downto 0);
		VGA_HS			: out std_logic;
		VGA_VS			: out std_logic;

		-- SD/MMC Memory Card
		SD_SO			: in std_logic;
		SD_SI			: out std_logic;
		SD_CLK			: out std_logic;
		SD_CS_N			: out std_logic;

		-- External I/O
		DAC_OUT_L		: out std_logic; 
		DAC_OUT_R		: out std_logic; 
		KEYS			: in std_logic_vector(3 downto 0);
		BUZZER			: out std_logic;

		-- UART
		UART_TXD		: inout std_logic;
		UART_RXD		: in std_logic;

		-- PS/2 Keyboard
		PS2_CLK			: inout std_logic;
		PS2_DAT 		: inout std_logic

	);
end test;  

architecture test_arch of test is

signal clk_84 		: 	std_logic;
signal clk_28 		: 	std_logic;
signal clk_14 		: 	std_logic;
signal clk_7 		: 	std_logic;
signal clk_3_5		:	std_logic;
signal locked 		: 	std_logic;

signal cpu_reset_n 	: 	std_logic;
signal cpu_clk		:	std_logic;
signal cpu_int_n	:	std_logic;
signal cpu_nmi_n	:	std_logic;
signal cpu_m1_n		:	std_logic;
signal cpu_mreq_n	:	std_logic;
signal cpu_iorq_n	:	std_logic;
signal cpu_rd_n		:	std_logic;
signal cpu_wr_n		:	std_logic;
signal cpu_rfsh_n	:	std_logic;
signal cpu_a_bus	:	std_logic_vector(15 downto 0);
signal cpu_di_bus	:	std_logic_vector(7 downto 0);
signal cpu_do_bus	:	std_logic_vector(7 downto 0);

signal video_ram_a	:	std_logic_vector(13 downto 0);
signal video_ram_do	:	std_logic_vector(7 downto 0);
signal video_ram_di	:	std_logic_vector(7 downto 0);
signal video_ram_oe	:	std_logic;
signal video_ram_cs	:	std_logic;
signal video_ram_we	:	std_logic;

signal ula_ear		: 	std_logic;
signal ula_mic		: 	std_logic;
signal ula_spk		:	std_logic;

signal kb_rows		:	std_logic_vector(7 downto 0);
signal kb_cols		:	std_logic_vector(4 downto 0);
signal kb_f			:	std_logic_vector(12 downto 1);

signal ula_r 		:	std_logic;
signal ula_g		:	std_logic;
signal ula_b		: 	std_logic;
signal ula_i 		:	std_logic;
signal ula_csync	:	std_logic;	
signal ula_hsync	:	std_logic;
signal ula_vsync	:	std_logic;

signal vga_red		:	std_logic_vector(2 downto 0);
signal vga_green		:	std_logic_vector(2 downto 0);
signal vga_blue		:	std_logic_vector(2 downto 0);
signal vga_hsync		:	std_logic;
signal vga_vsync		:	std_logic;
signal vga_sblank		:	std_logic;

begin

-- Clocks
U0: entity work.altpll1
	port map (
		areset		=> areset,
		inclk0		=> CLK,		--  48.0 MHz
		locked		=> locked,
		c0			=> clk_84, 	-- 84 MHz
		c1			=> clk_28, 	-- 28 MHz
		c2			=> clk_14, 	-- 14 MHz
		c3			=> clk_7,	-- 7 MHz
		c4 			=> clk_3_5	-- 3.5 MHz
);

-- Zilog Z80A CPU
U1: entity work.T80s
	generic map (
		Mode		=> 0,	-- 0 => Z80, 1 => Fast Z80, 2 => 8080, 3 => GB
		T2Write		=> 1,	-- 0 => WR_n active in T3, 1 => WR_n active in T2
		IOWait		=> 1)	-- 0 => Single cycle I/O, 1 => Std I/O cycle
	port map(
		RESET_n		=> cpu_reset_n,
		CLK_n		=> cpu_clk,
		WAIT_n		=> '1',
		INT_n		=> cpu_int_n,
		NMI_n		=> cpu_nmi_n,
		BUSRQ_n		=> '1',
		M1_n		=> cpu_m1_n,
		MREQ_n		=> cpu_mreq_n,
		IORQ_n		=> cpu_iorq_n,
		RD_n		=> cpu_rd_n,
		WR_n		=> cpu_wr_n,
		RFSH_n		=> cpu_rfsh_n,
		HALT_n		=> open,
		BUSAK_n		=> open,
		A			=> cpu_a_bus,
		DI			=> cpu_di_bus,
		DO			=> cpu_do_bus,
		SavePC      => open,
		SaveINT     => open,
		RestorePC   => (others => '1'),
		RestoreINT  => (others => '1'),
		RestorePC_n => '1');

-- ULA
U2:	entity	work.ula_top
	port map (
		
		clk14 => 	clk_14,
	    a => 		cpu_a_bus,
	    din => 		cpu_di_bus,
		dout => 	cpu_do_bus,
	    mreq_n => 	cpu_mreq_n,
	    iorq_n => 	cpu_iorq_n,
	    rd_n => 	cpu_rd_n,
	    wr_n => 	cpu_wr_n,
		rfsh_n => 	cpu_rfsh_n, 
		clkcpu => 	cpu_clk,
		msk_int_in => cpu_m1_n,

	    va => 		video_ram_a,
		vramdout => video_ram_do,
		vramdin => 	video_ram_di,
	    vramoe => 	video_ram_oe,
	    vramcs => 	video_ram_cs,
	    vramwe => 	video_ram_we,

	    ear => ula_ear,
	    mic => ula_mic,
	    spk => ula_spk,

		kbrows => kb_rows,
	    kbcolumns => kb_cols,

	    r => 	ula_r,
	    g => 	ula_g,
	    b => 	ula_b,
	    i => 	ula_i,
	    csync => ula_csync,
	    hsync => ula_hsync,
	    vsync => ula_vsync
);

-- Video memory
U3: entity work.altram1
port map (
	clock_a		=> clk_14,
	clock_b		=> clk_14,
	address_a	=> video_ram_a,
	address_b	=> video_ram_a,
	data_a		=> video_ram_do,
	data_b		=> "11111111",
	q_a			=> open,
	q_b			=> video_ram_di,
	wren_a		=> video_ram_wr and video_ram_cs,
	wren_b		=> '0');

-- Keyboard
U4: entity work.keyboard
port map(
	CLK			=> clk_14,
	RESET		=> areset,
	ROWS 		=> kb_rows,
	COLS 		=> kb_cols,
	F 			=> kb_f,
	PS2_CLK 	=> PS2_CLK,
	PS2_DAT 	=> PS2_DAT
);

-- SDRAM Controller
U5: entity work.sdram
port map (
	CLK			=> clk_84,
	A			=> ram_a_bus & cpu_a_bus(12 downto 0),
	DI			=> cpu_do_bus,
	DO			=> cpu_di_bus,
	WR			=> sdr_wr,
	RD			=> sdr_rd,
	RFSH		=> sdr_rfsh,
	RFSHREQ		=> open,
	IDLE		=> open,
	CK			=> SDRAM_CLK,
	RAS_n		=> SDRAM_RAS_n,
	CAS_n		=> SDRAM_CAS_n,
	WE_n		=> SDRAM_WE_n,
	DQML		=> SDRAM_DQML,
	DQMH		=> SDRAM_DQMH,
	BA			=> SDRAM_BA,
	MA			=> SDRAM_A,
	DQ			=> SDRAM_D);

SDRAM_CKE <= '1'; -- pullup
SDRAM_CS_N <= '0'; -- pulldown

-------------------------------------------------------------

areset <= not KEYS(3);					-- глобальный сброс
reset <= areset or not locked;			-- горячий сброс
cpu_reset_n <= not(reset) and not(kb_f_bus(4));	-- CPU сброс

sdr_wr <= '1' when cpu_mreq_n = '0' and cpu_wr_n = '0' and (mux = "1001" or mux(3 downto 2) = "11" or mux(3 downto 2) = "01" or mux(3 downto 1) = "101" or mux(3 downto 1) = "001") else '0';
sdr_rd <= not (cpu_mreq_n or cpu_rd_n);
sdr_rfsh <= not cpu_rfsh_n;

-- селектор адреса
mux <= cpu_a_bus(15 downto 13);
process (mux, ram_a_bus, cpu_a_bus)
begin
	case mux is
		when "000"  => ram_a_bus <= "100001000000"; -- Seg0 ROM 0000-1FFF
		when "001"  => ram_a_bus <= "100001000001"; -- Seg0 ROM 2000-3FFF
		when "010"	=> ram_a_bus <= "000000001010"; -- Seg1 RAM 4000-5FFF
		when "011"  => ram_a_bus <= "000000001011";	-- Seg1 RAM 6000-7FFF
		when "100"  => ram_a_bus <= "000000000100";	-- Seg2 RAM 8000-9FFF
		when "101"  => ram_a_bus <= "000000000101";	-- Seg2 RAM A000-BFFF
		when others => null;
	end case;
end process;

-- VGA converter
U6 : entity work.scan_convert
generic map (
	-- mark active area of input video
	cstart      	=>  38,  -- composite sync start
	clength     	=> 352,  -- composite sync length
	-- output video timing
	hA		=>  24,	-- h front porch
	hB		=>  32,	-- h sync
	hC		=>  40,	-- h back porch
	hD		=> 352,	-- visible video
--	vA		=>   0,	-- v front porch (not used)
	vB		=>   2,	-- v sync
	vC		=>  10,	-- v back porch
	vD		=> 284,	-- visible video
	hpad		=>   0,	-- create H black border
	vpad		=>   0	-- create V black border
)
port map (
	I_VIDEO		=> ula_i & ula_r & ula_i & ula_g & ula_i & ula_b,
	I_HSYNC		=> ula_hsync,
	I_VSYNC		=> ula_vsync,
	O_VIDEO(5 downto 4)	=> vga_red,
	O_VIDEO(3 downto 2)	=> vga_green,
	O_VIDEO(1 downto 0)	=> vga_blue,
	O_HSYNC		=> vga_hsync,
	O_VSYNC		=> vga_vsync,
	O_CMPBLK_N	=> vga_sblank,
	CLK			=> clk_7,
	CLK_x2		=> clk_14);

-- VGA output
VGA_R <= vga_red(1) & vga_red(0) & "000"  when vga_sblank = '1' else "00000";
VGA_G <= vga_green(1) & vga_green(0) & "0000" when vga_sblank = '1' else "000000";
VGA_B <= vga_blue(1) & vga_blue(0) & "000"  when vga_sblank = '1' else "00000";
VGA_HS <= vga_hsync;
VGA_VS <= vga_vsync;

end test_arch;